Build docker image: docker -t imagename .
run container: docker run -p expose_port_in_docker_file:any_port_of_device imagename
tag to image: docker tag imagename username@dockerhub/imagename:define_your_tag 
push image to dockerhub: docker push username@dockerhub/imagename:define_your_tag 
pull image from dockerhub:docker pull username@dockerhub/imagename:define_your_tag  


##############################
###########   NOTES  #########
##############################

1. Why Docker is needed?

Docker helps developers build, package, and deploy applications quickly and efficiently. It solves the problem of "it works on my machine" by creating a consistent environment across development, testing, and production. Docker containers encapsulate everything an app needs—like code, libraries, and dependencies—ensuring it runs reliably on any system.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Benefits of Docker:

Portability: Docker containers can run consistently across different environments (development, testing, production) without worrying about OS or platform differences. For example, a container running on your laptop will work the same on a cloud server.

Isolation: Each Docker container is isolated from others, which means apps won’t interfere with one another. This is useful when running multiple services or apps on the same machine without worrying about compatibility issues.

Scalability: Docker makes scaling apps easier. For example, if a web service is getting high traffic, you can quickly spin up more containers to handle the load, and when traffic decreases, you can remove containers to save resources.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. Docker vs VM (Virtual Machine):

Docker: Containers share the host OS and use fewer resources, making them lightweight. Starting a container takes seconds. Example: If you need to run 10 microservices, each can run in its own container, using less memory and starting quickly.

VM: Virtual machines run a full OS for each instance, making them heavy and slower to start (minutes). They consume more resources because they need to virtualize hardware, not just the app. Example: Running the same 10 microservices in VMs will require significantly more memory and CPU because each VM has its own OS.

In summary, Docker is lighter, faster, and more portable compared to VMs, which are heavier and slower due to full OS virtualization.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4. Docker Engine: Explained

Docker Engine is the core technology that powers Docker, consisting of three main parts:

Docker Daemon (Server): This is the background service running on the host machine. It is responsible for managing Docker objects like containers, images, networks, and volumes. The daemon listens for API requests and performs the actions you request.

REST API: This allows communication between the Docker Daemon and the client. You can use the API to interact with Docker, such as creating containers or images.

Docker CLI (Client): The command-line interface (CLI) is the tool you use to interact with Docker. When you type commands like docker run or docker build, the CLI sends instructions to the Docker Daemon via the REST API.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5. Docker Image: A Docker image is a lightweight, standalone, and executable package that includes everything needed to run a piece of software. It's read-only and is used to create containers.

Components of a Docker Image:
Base Image: This is the starting point, usually a minimal OS or runtime.
Layers: Each change (like installing software, adding files) in the image adds a new layer. Docker uses a layered filesystem, so layers are stacked to form the final image.
Metadata: Contains information like the image’s size, creation date, and instructions (like CMD or ENTRYPOINT) on how to run the container.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6. Docker Image Lifecycle

Creation: Build a new image using a Dockerfile or pull one from a registry (e.g., docker pull).
Storage: Images are stored locally in your Docker environment and can be pushed to remote registries like Docker Hub.
Distribution: Images can be shared or distributed by pushing them to a public/private registry, where others can pull and use them.
Execution: When you run a Docker image, a container is created. This container is the live instance of the image.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7. Dockerfile: It is a text file with instructions on how to build a Docker image. It's a blueprint for the image, specifying the environment, app, and dependencies.

Key Components:

FROM: Specifies the base image.
COPY or ADD: Adds files from your host system into the image.
RUN: Executes commands in the image, such as installing software.
CMD or ENTRYPOINT: Defines the command that runs when the container starts.
EXPOSE: Specifies the port the container will listen on.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

8. A Docker container is a lightweight, isolated, and executable environment created from a Docker image. It packages the application and all its dependencies, ensuring it runs consistently in any environment.

Key Features:

Isolation: Each container runs independently with its own filesystem and resources.
Ephemeral: Containers can be started, stopped, or destroyed easily.
Lightweight: Containers share the host OS kernel, making them faster and less resource-intensive than VMs.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


9. A Docker Registry is a storage and distribution system for Docker images. It allows users to share, manage, and access Docker images.

Public Registry: Docker Hub is the most popular public registry, where anyone can pull or push images. Public registries are free but open to everyone.
Private Registry: You can set up a private registry to store images within your organization, providing better security and control over your images.
Cloud Registries: Many cloud providers like AWS (ECR), Google Cloud (GCR), and Azure (ACR) offer managed registries with built-in security, scalability, and integration with cloud services.

Benefits:

Centralized Storage: Easily manage and store Docker images in one place.
Versioning: Registries keep track of image versions, making it easy to manage updates.
Collaboration: Public registries allow users to share images with the global developer community, while private ones facilitate collaboration within organizations.